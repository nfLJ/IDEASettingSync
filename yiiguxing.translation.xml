<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="486" />
    <option name="newTranslationDialogX" value="566" />
    <option name="newTranslationDialogY" value="344" />
    <histories>
      <item value="周三打卡" />
      <item value="周三" />
      <item value="punch in on Wednesday&#10;" />
      <item value="punch in on &#10;" />
      <item value="punch&#10;" />
      <item value="个人_健康档案_操作" />
      <item value="健康档案" />
      <item value="健康" />
      <item value="EHRMANA" />
      <item value="结账" />
      <item value="结账&#10;" />
      <item value="come on" />
      <item value="delegate" />
      <item value="Criteria" />
      <item value="Abstract" />
      <item value="工作单位" />
      <item value="工作" />
      <item value="单" />
      <item value="单位" />
      <item value="诊疗费&#10;" />
      <item value="zhen'cha" />
      <item value="侦察" />
      <item value="挂号费" />
      <item value="挂号" />
      <item value="gu" />
      <item value="费用" />
      <item value="Usage Note If the class path of a class loader that is used for provider loading includes remote network URLs then those URLs will be dereferenced in the process of searching for provider-configuration files. This activity is normal, although it may cause puzzling entries to be created in web-server logs. If a web server is not configured correctly, however, then this activity may cause the provider-loading algorithm to fail spuriously. A web server should return an HTTP 404 (Not Found) response when a requested resource does not exist. Sometimes, however, web servers are erroneously configured to return an HTTP 200 (OK) response along with a helpful HTML error page in such cases. This will cause a ServiceConfigurationError to be thrown when this class attempts to parse the HTML page as a provider-configuration file. The best solution to this problem is to fix the misconfigured web server to return the correct response code (HTTP 404) along with the HTML error page." />
      <item value="snoopy" />
      <item value="Objenesis" />
      <item value="皮试" />
      <item value="pi'shi" />
      <item value="A class implements the Cloneable interface to indicate to the Object.clone() method that it is legal for that method to make a field-for-field copy of instances of that class. Invoking Object's clone method on an instance that does not implement the Cloneable interface results in the exception CloneNotSupportedException being thrown. By convention, classes that implement this interface should override Object.clone (which is protected) with a public method. See Object.clone() for details on overriding this method. Note that this interface does not contain the clone method. Therefore, it is not possible to clone an object merely by virtue of the fact that it implements this interface. Even if the clone method is invoked reflectively, there is no guarantee that it will succeed." />
      <item value="legal" />
      <item value="indicate" />
      <item value="符号" />
      <item value="转义符号" />
      <item value="转义" />
      <item value="医保电子凭证" />
      <item value="电子凭证" />
      <item value="电子" />
      <item value="医保卡" />
      <item value="健康卡" />
      <item value="身份证" />
      <item value="s" />
      <item value="Constraint Violation" />
      <item value="Abstract implementation of the ApplicationContext interface. Doesn't mandate the type of storage used for configuration; simply implements common context functionality. Uses the Template Method design pattern, requiring concrete subclasses to implement abstract methods. In contrast to a plain BeanFactory, an ApplicationContext is supposed to detect special beans defined in its internal bean factory: Therefore, this class automatically registers BeanFactoryPostProcessors, BeanPostProcessors, and ApplicationListeners which are defined as beans in the context. A MessageSource may also be supplied as a bean in the context, with the name &quot;messageSource&quot;; otherwise, message resolution is delegated to the parent context. Furthermore, a multicaster for application events can be supplied as an &quot;applicationEventMulticaster&quot; bean of type ApplicationEventMulticaster in the context; otherwise, a default multicaster of type SimpleApplicationEventMulticaster will be used. Implements resource loading by extending DefaultResourceLoader. Consequently treats non-URL resource paths as class path resources (supporting full class path resource names that include the package path, e.g. &quot;mypackagemyresource.dat&quot;), unless the getResourceByPath method is overridden in a subclass." />
      <item value="Since proceed(..) in this case takes an Object array, AspectJ cannot do as much compile time checking as it can for code style. If the rules above aren't obeyed then it will unfortunately manifest as a runtime error. Params: args – the arguments to proceed with Returns: the result of proceeding Throws: Throwable – if the invoked proceed throws anything" />
      <item value="医生" />
      <item value="核酸医嘱" />
      <item value="核酸" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="153" />
        <entry key="ENGLISH" value="148" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="UZBEK" value="3" />
        <entry key="ITALIAN" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1655790534508" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>