<application>
  <component name="AppStorage">
    <option name="newTranslationDialogCollapseDictViewer" value="false" />
    <option name="newTranslationDialogHeight" value="144" />
    <option name="newTranslationDialogWidth" value="396" />
    <option name="newTranslationDialogX" value="462" />
    <option name="newTranslationDialogY" value="346" />
    <histories>
      <item value="Returns a Collector that accumulates elements into a Map whose keys and values are the result of applying the provided mapping functions to the input elements. If the mapped keys contains duplicates (according to Object.equals(Object)), the value mapping function is applied to each equal element, and the results are merged using the provided merging function. Params: keyMapper – a mapping function to produce keys valueMapper – a mapping function to produce values mergeFunction – a merge function, used to resolve collisions between values associated with the same key, as supplied to Map.merge(Object, Object, BiFunction) Type parameters: &lt;T&gt; – the type of the input elements &lt;K&gt; – the output type of the key mapping function &lt;U&gt; – the output type of the value mapping function Returns: a Collector which collects elements into a Map whose keys are the result of applying a key mapping function to the input elements, and whose values are the result of applying a value mapping function to all input elements equal to the key and combining them using the merge function API Note: There are multiple ways to deal with collisions between multiple elements mapping to the same key. The other forms of toMap simply use a merge function that throws unconditionally, but you can easily write more flexible merge policies. For example, if you have a stream of Person, and you want to produce a &quot;phone book&quot; mapping name to address, but it is possible that two persons have the same name, you can do as follows to gracefully deals with these collisions, and produce a Map mapping names to a concatenated list of addresses: Map&lt;String, String&gt; phoneBook people.stream().collect(toMap(Person::getName, Person::getAddress, (s, a) -&gt; s + &quot;, &quot; + a)); Implementation Note: The returned Collector is not concurrent. For parallel stream pipelines, the combiner function operates by merging the keys from one map into another, which can be an expensive operation. If it is not required that results are merged into the Map in encounter order, using toConcurrentMap(Function, Function, BinaryOperator) may offer better parallel performance. See Also: toMap(Function, Function), toMap(Function, Function, BinaryOperator, Supplier), toConcurrentMap(Function, Function, BinaryOperator)" />
      <item value="检验" />
      <item value="退费用" />
      <item value="退费yong" />
      <item value="退费" />
      <item value="退费时间" />
      <item value="管理员" />
      <item value="自助机" />
      <item value="业务类型" />
      <item value="Reconciliation" />
      <item value="中医" />
      <item value="zhong" />
      <item value="zhongi" />
      <item value="zhon" />
      <item value="zhony" />
      <item value="Reservation" />
      <item value="CancelReservation" />
      <item value="Cancel" />
      <item value="提示" />
      <item value="提示内容" />
      <item value="提示neir" />
      <item value="tis" />
      <item value="拦截" />
      <item value="校验" />
      <item value="惠民优抚" />
      <item value="惠民" />
      <item value="duplicate&#10;" />
      <item value="dup;" />
      <item value="caret&#10;" />
      <item value="cara" />
      <item value="car" />
      <item value="english" />
      <item value="en" />
      <item value="book" />
      <item value="TOOL" />
      <item value="tool" />
      <item value="tools" />
      <item value="liujiag" />
      <item value="liujia" />
      <item value="ts" />
      <item value="t" />
      <item value="医疗" />
      <item value="yilao" />
      <item value="tool&#10;" />
      <item value="请求" />
      <item value="qingqiuy" />
      <item value="但是" />
      <item value="ds " />
      <item value="ds" />
      <item value="本地" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="344" />
        <entry key="ENGLISH" value="332" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="UZBEK" value="3" />
        <entry key="ITALIAN" value="4" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1695104935608" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20220813001304829" />
      </app-key>
    </option>
    <option name="phoneticFontFamily" value="JetBrains Mono Regular" />
    <option name="primaryFontFamily" value="JetBrains Mono Regular" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="47381a3cc5b1012f" />
      </youdao-translate>
    </option>
  </component>
</application>